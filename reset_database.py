#!/usr/bin/env python3
"""
Script de r√©initialisation de la base de donn√©es Trashway
Ce script supprime la base de donn√©es existante et la recr√©e avec un sch√©ma propre.
"""

import os
import sqlite3
import subprocess
import sys

def reset_database():
    """R√©initialise compl√®tement la base de donn√©es"""
    
    # Chemin vers les fichiers
    project_root = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(project_root, "database", "trashway.db")
    schema_path = os.path.join(project_root, "database", "schema.sql")
    
    print("üóÑÔ∏è R√©initialisation de la base de donn√©es Trashway")
    print("=" * 50)
    
    # √âtape 1: Supprimer la base de donn√©es existante
    if os.path.exists(db_path):
        print(f"üìÇ Suppression de la base existante: {db_path}")
        os.remove(db_path)
        print("‚úÖ Base de donn√©es supprim√©e")
    else:
        print("‚ÑπÔ∏è  Aucune base de donn√©es existante trouv√©e")
    
    # √âtape 2: V√©rifier que le sch√©ma existe
    if not os.path.exists(schema_path):
        print(f"‚ùå Erreur: Fichier schema.sql introuvable: {schema_path}")
        sys.exit(1)
    
    # √âtape 3: Recr√©er la base avec le sch√©ma
    print(f"üîß Cr√©ation de la nouvelle base avec le sch√©ma: {schema_path}")
    try:
        result = subprocess.run(
            ["sqlite3", db_path], 
            stdin=open(schema_path, 'r'), 
            capture_output=True, 
            text=True,
            check=True
        )
        print("‚úÖ Base de donn√©es recr√©√©e avec succ√®s")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base: {e}")
        sys.exit(1)
    
    # √âtape 4: V√©rifier les tables cr√©√©es
    print("üîç V√©rification des tables cr√©√©es...")
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        conn.close()
        
        print(f"üìã Tables cr√©√©es: {', '.join([table[0] for table in tables])}")
        print("‚úÖ R√©initialisation termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        sys.exit(1)

def reset_docker_volumes():
    """R√©initialise aussi les volumes Docker si n√©cessaire"""
    print("\nüê≥ R√©initialisation des volumes Docker...")
    
    try:
        # Arr√™ter les conteneurs
        subprocess.run(["docker-compose", "down"], capture_output=True, check=False)
        
        # Supprimer les volumes (optionnel)
        result = subprocess.run(
            ["docker", "volume", "ls", "-q", "--filter", "name=trashway"], 
            capture_output=True, 
            text=True
        )
        
        if result.stdout.strip():
            subprocess.run(["docker", "volume", "rm"] + result.stdout.strip().split(), 
                         capture_output=True, check=False)
            print("‚úÖ Volumes Docker supprim√©s")
        else:
            print("‚ÑπÔ∏è  Aucun volume Docker √† supprimer")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Avertissement Docker: {e}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="R√©initialise la base de donn√©es Trashway")
    parser.add_argument("--with-docker", action="store_true", 
                       help="R√©initialise aussi les volumes Docker")
    parser.add_argument("--force", action="store_true", 
                       help="Force la r√©initialisation sans confirmation")
    
    args = parser.parse_args()
    
    if not args.force:
        response = input("‚ö†Ô∏è  Voulez-vous vraiment r√©initialiser la base de donn√©es ? (y/N): ")
        if response.lower() not in ['y', 'yes', 'oui']:
            print("‚ùå Op√©ration annul√©e")
            sys.exit(0)
    
    reset_database()
    
    if args.with_docker:
        reset_docker_volumes()
    
    print("\nüéâ R√©initialisation compl√®te termin√©e !")
    print("Vous pouvez maintenant red√©marrer l'application avec 'docker-compose up'")
